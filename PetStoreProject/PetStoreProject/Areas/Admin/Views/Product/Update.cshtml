@using PetStoreProject.Areas.Admin.ViewModels
@using PetStoreProject.ViewModels
@model PetStoreProject.Areas.Admin.ViewModels.ProductCreateRequestViewModel
@{
    ViewData["title"] = "Chỉnh sửa";
    var product = ViewData["product"] as ProductDetailForAdmin;
    var brands = ViewData["brands"] as List<BrandViewModel>;
    var categories = ViewData["categories"] as List<CategoryViewModel>;
    var productCategories = ViewData["productCategories"] as List<ProductCategoryViewModel>;
    var sizes = ViewData["sizes"] as List<SizeViewModel>;
    var attributes = ViewData["attributes"] as List<AttributeViewModel>;
    var images = ViewData["images"] as List<PetStoreProject.Models.Image>;
    }
    @section HeadOptional {
    <script src="https://cdn.tiny.cloud/1/vmg6xq9b7kglu6elt6oqb6zuq75zntiodhgmxmgwwirj6x81/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <style>
        .hidden {
            display: none;
        }

        li:nth-child(2n+1) {
            background-color: #f6f8fbcc;
        }

        .item {
            cursor: pointer;
        }

        .item.select-image {
            border: 2px solid #000;
        }

        .delete-icon {
            display: flex;
            width: 25px;
            heigth: 25px;
            position: absolute;
            top: -3px;
            right: -3px;
            color: black;
            border: none;
            padding: 5px;
            color: blue;
        }

        .delete-button {
            position: absolute;
            top: -3px;
            right: 4px;
            color: black;
            border: none;
            padding: 0px;
        }

        textarea {
            width: 100%;
        }

        #notice {
            color: red;
            font-size: 11px;
        }
    </style>

}
<div class="main-content-inner">
    <!-- main-content-wrap -->
    <div class="main-content-wrap">
        <div class="flex items-center flex-wrap justify-between gap20 mb-27">
            <h3>Thêm sản phẩm</h3>
            <ul class="breadcrumbs flex items-center flex-wrap justify-start gap10">
                <li>
                    <a href="index.html"><div class="text-tiny">Dashboard</div></a>
                </li>
                <li>
                    <i class="icon-chevron-right"></i>
                </li>
                <li>
                    <a href="#"><div class="text-tiny">Sản phẩm</div></a>
                </li>
                <li>
                    <i class="icon-chevron-right"></i>
                </li>
                <li>
                    <div class="text-tiny">Thêm mới</div>
                </li>
            </ul>
        </div>
        <!-- form-add-product -->
        <form class="tf-section-2 form-add-product">
            <div class="wg-box">
                <fieldset class="name">
                    <label asp-for="Name" class="body-title mb-10">Tên sản phẩm<span class="tf-color-1">*</span></label>
                    <input class="mb-10" asp-for="Name" placeholder="Nhập tên sản phẩm" id="name" value="@product.Name">
                    <span id="error-name" class="text-danger"></span>
                    @* <div class="text-tiny">Do not exceed 20 characters when entering the product name.</div> *@
                </fieldset>
                <div class="gap22 cols">
                    <fieldset class="brand">
                        <label asp-for="BrandId" class="body-title mb-10">Thương hiệu</label>
                        <div class="select flex gap22" id="list-brand">
                            <select asp-for="BrandId" class="" id="brand">
                                @foreach (var brand in brands)
                                {
                                    <option value="@brand.Id" selected="@(product.Brand.BrandId == brand.Id)">@brand.Name</option>
                                }
                            </select>
                            <input type="text" id="brandFilter" placeholder="Nhập để tìm kiếm thương hiệu ...">
                        </div>
                    </fieldset>
                </div>
                <div class="cols gap22">
                    <fieldset class="category">
                        <label asp-for="CategoryId" class="body-title mb-10">Danh mục</label>
                        <div class="select">
                            <select asp-for="CategoryId" class="" id="category">
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id" selected="@(product.Category.CategoryId == category.Id)">@category.Name</option>
                                }
                            </select>
                            <span asp-validation-for="CategoryId" class="text-danger"></span>
                        </div>
                    </fieldset>
                    <fieldset class="product-category">
                        <label asp-for="ProductCateId" class="body-title mb-10">Danh mục sản phẩm</label>
                        <div class="select">
                            <select asp-for="ProductCateId" class="" id="product-category">
                                @foreach (var productCategory in productCategories)
                                {
                                    <option value="@productCategory.Id" selected="@(product.ProductCategory.ProductCateId == productCategory.Id)">@productCategory.Name</option>
                                }
                            </select>
                            <span asp-validation-for="ProductCateId" class="text-danger"></span>
                        </div>
                    </fieldset>
                </div>
                <fieldset class="description">
                    <label class="body-title mb-10">Mô tả sản phẩm <span class="tf-color-1">*</span></label>
                    <textarea id="description" name="descriptio" class="mb-10" placeholder="Nhập mô tả sản phẩm" tabindex="0" aria-required="true" required=""></textarea>
                    <span id="error-description" class="text-danger"></span>
                </fieldset>
            </div>
            <div class="wg-box">
                <fieldset>
                    <label class="body-title mb-10">Tải ảnh lên<span class="tf-color-1">*</span></label>
                    <div class="upload-image mb-16" id="upload-image">
                        <div class="item up-load">
                            <label class="uploadfile" for="myFile">
                                <span class="icon">
                                    <i class="icon-upload-cloud"></i>
                                </span>
                                <span class="text-tiny">Thả hình ảnh của bạn vào đây hoặc <span class="tf-color">chọn đường dẫn</span></span>
                                <input type="file" id="myFile" name="filename" accept="image/*" onchange="previewImage(event)">
                            </label>
                        </div>
                    </div>
                </fieldset>
                <fielset>
                    <div class="upload-image" id="preview-image">
                    </div>
                </fielset>
                <fieldset>
                    <div class="upload-image mb-16" id="list-image" style="overflow-x: auto">
                        @foreach (var image in images)
                        {
                            <div onclick="selectImage(this)" class="item" style="position: relative; max-width: 25%; min-width: 25%; border-radius: 2px;">
                                <img src="@image.ImageUrl" alt="">
                            </div>
                        }
                    </div>
                    <span id="error-image" class="text-danger"></span>
                </fieldset>
                <div class="gap22">
                    <fieldset class="name">
                        <label class="body-title mb-10">Kích thước</label>
                        <div class="select mb-10 flex gap22" id="list-size">
                            <select class="" id="size">
                                @foreach (var size in sizes)
                                {
                                    if (size.Name == null)
                                    {
                                        <option value="@size.Id">Trống</option>
                                    }
                                    else
                                    {
                                        <option value="@size.Id">@size.Name</option>
                                    }
                                }
                            </select>
                            <input type="text" id="sizeFilter" placeholder="Nhập để tìm kiếm kích thước...">
                        </div>
                    </fieldset>
                    <fieldset class="name">
                        <label class="body-title mb-10">Thuộc tính</label>
                        <div class="select mb-10 flex gap22" id="list-attribute">
                            <select id="attribute">
                                @foreach (var attr in attributes)
                                {
                                    if (attr.Name == null)
                                    {
                                        <option value="@attr.Id">Trống</option>
                                    }
                                    else
                                    {
                                        <option value="@attr.Id">@attr.Name</option>
                                    }
                                }
                            </select>
                            <input type="text" id="attributeFilter" placeholder="Nhập để tìm kiếm thuộc tính...">
                        </div>
                    </fieldset>
                    <fieldset class="name">
                        <label class="body-title mb-10">Price</label>
                        <div class="select mb10 flex gap22" style="align-items:center">
                            <input type="text" id="price" min="1000">
                            <span>VND</span>
                        </div>

                        <span id="error-price" class="text-danger"></span>
                    </fieldset>
                </div>
                <div style="max-height: 155px; overflow-x: auto">
                    <ul class="flex flex-column" id="list-product-option">
                    </ul>

                </div>
                <div id="notice">Lưu ý: Bạn cần thêm các tùy chọn của sản phẩm trước khi bạn có thể lưu sản phẩm<span class="tf-color-1">*</span></div>
                <div class="cols gap10">
                    <button class="tf-button w-full" type="button" onclick="addProductOption()">Thêm tùy chọn sản phẩm</button>
                    <button class="tf-button style-1 w-full" type="button" onclick="saveProduct()">Lưu sản phẩm</button>
                </div>
            </div>
        </form>
        <!-- /form-add-product -->
    </div>
    <!-- /main-content-wrap -->
</div>
<div class="tab-content thumb-content">
    <div id="detail" class="tab-pane fade show active">
        <div class="wg-box h-full gap15" style="max-height: 550px; overflow-y: auto">
            @foreach (var po in product.ProductOptions)
            {
                <div class="row">
                    <div class="col-12 mb-20">
                        <div class="shop-item gap20">
                            <div class="image">
                                <img style="border-radius: 0px" src="@po.Image.ImageUrl" alt="">
                            </div>
                            <div class="flex-grow flex justify-between gap20">
                                <div class="body-text" style="width: 20%">@((po.Attribute.AttributeId == 1) ? "Trống" : po.Attribute.Name)</div>
                                <div class="body-text" style="width: 20%">@((po.Size.SizeId == 1) ? "Trống" : po.Size.Name)</div>
                                <div class="body-text" style="width: 15%">@po.Price.ToString("#,###") VND</div>
                                <div style="width: 15%" class="body-text">@po.SoldQuantity đã bán</div>
                                <div style="width: 15%" class="body-text @((po.IsSoldOut == true) ? "block-not-available" : "block-available")">@((po.IsSoldOut == true) ? "Hết hàng" : "Còn hàng")</div>
                                <div style="width: 15%" class="body-text @((po.IsDelete == true) ? "block-not-available" : "block-available")">@((po.IsDelete == true) ? "Ngừng bán" : "Còn bán")</div>
                                <div>
                                    <div class="item edit">
                                        <i class="icon-edit-3"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>
@section ScriptOptional {
    <script>
        var regex = /^[0-9\W]+$/;
        var numberRegex = /^-?\d+(\.\d+)?$/;
        var description = `@Html.Raw(product.Description)`
        console.log(description)
        var isUploadFile = false
        document.getElementById('sizeFilter').addEventListener('input', function () {
            let filter = this.value.toLowerCase();
            let dropdown = document.getElementById('list-size');
            let options = dropdown.getElementsByTagName('option');
            let isSelect = false;
            for (let i = 0; i < options.length; i++) {
                let option = options[i];
                let txtValue = option.textContent || option.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    option.style.display = "";
                    if (!isSelect) {
                        option.selected = true;
                        isSelect = true;
                    }
                    else {
                        option.selected = false;
                    }
                } else {
                    option.style.display = "none";
                }
            }
        });

        document.getElementById('brandFilter').addEventListener('input', function () {
            let filter = this.value.toLowerCase();
            let dropdown = document.getElementById('list-brand');
            let options = dropdown.getElementsByTagName('option');
            let isSelect = false;
            for (let i = 0; i < options.length; i++) {
                let option = options[i];
                let txtValue = option.textContent || option.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    option.style.display = "";
                    if (!isSelect) {
                        option.selected = true;
                        isSelect = true;
                    }
                    else {
                        option.selected = false;
                    }
                } else {
                    option.style.display = "none";
                }
            }
        });

        document.getElementById('attributeFilter').addEventListener('input', function () {
            let filter = this.value.toLowerCase();
            let dropdown = document.getElementById('list-attribute');
            let options = dropdown.getElementsByTagName('option');
            let isSelect = false;
            for (let i = 0; i < options.length; i++) {
                let option = options[i];
                let txtValue = option.textContent || option.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    option.style.display = "";
                    if (!isSelect) {
                        option.selected = true;
                        isSelect = true;
                    }
                    else {
                        option.selected = false;
                    }
                } else {
                    option.style.display = "none";
                }
            }
        });
        tinymce.init({
            selector: '#description',
            plugins: 'lists checklist',
            toolbar: 'bold italic underline | align | checklist numlist bullist | removeformat',
            menubar: false,
            setup: function (editor) {
                editor.on('init', function () {
                    editor.setContent(description);
                });
                editor.on('input', function () {
                    // Cập nhật giá trị của textarea khi có sự thay đổi
                    description = editor.getContent();
                    document.getElementById('description').value = description;
                });
            }
        });

        function previewImage(event) {
            isUploadFile = true;
            var files = event.target.files;
            var uploadImage = $('#upload-image');
            var previewImage = $('#preview-image');
            previewImage.empty();
            uploadImage.addClass('hidden');
            removeImageSelect();
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var reader = new FileReader();

                reader.onload = (function (file) {
                    return function (e) {
                        var imageContainer = $('<div>', {
                            class: 'item select-image',
                            style: 'position: relative; max-width: 100%; border-radius: 2px;',
                            click: function () {
                                selectImage(this)
                            }
                        });

                        var img = $('<img>', {
                            src: e.target.result
                        });

                        var deleteBtn = $('<button>', {
                            class: 'delete-icon',
                            html: '<i class="icon-delete"></i>',
                            click: function () {
                                uploadImage.removeClass('hidden');
                                imageContainer.remove();
                            }
                        });

                        imageContainer.append(img);
                        imageContainer.append(deleteBtn);
                        previewImage.append(imageContainer);
                    };
                })(file);

                reader.readAsDataURL(file);
            }
        }

        function addImageToList(src) {
            var listImage = $('#list-image');
            var isExists = false;
            listImage.find('div').each(function () {
                var image = $(this).find('img').attr('src');
                if (image == src) {
                    isExists = true;
                    return false;
                }
            });
            if (!isExists) {
                var imageContainer = $('<div>', {
                    class: 'item',
                    style: 'position: relative; max-width: 25%; min-width: 25%; border-radius: 2px;',
                    click: function () {
                        selectImage(this)
                    }
                });

                var img = $('<img>', {
                    src: src
                });

                imageContainer.append(img);
                listImage.append(imageContainer);
            }
        }

        function selectImage(image) {
            removeImageSelect()
            $(image).addClass('select-image');
        }

        function removeImageSelect() {
            var images = $('#list-image').children();
            for (var i = 0; i < images.length; i++) {
                $(images[i]).removeClass('select-image');
            }

            images = $('#preview-image').children();
            if (images.length > 0) {
                $(images[0]).removeClass('select-image');
            }
        }

        function isValidProductOption() {
            var isValid = true;

            var name = $('#name').val().trim()
            var brandId = $('#brand').val();
            var categoryId = $('#category').val();
            var productCategory = $('#product-category').val();

            var image = $('.item.select-image img').attr('src');

            var sizeId = $('#size').val();
            var sizeName = $('#size option:selected').text();

            var attributeId = $('#attribute').val();
            var attributeName = $('#attribute option:selected').text();

            var price = $('#price').val()

            if (name == '') {
                isValid = false
                $('#error-name').text('Tên sản phẩm không được để trống');
            }
            else if (name.length > 200) {
                isValid = false
                $('#error-name').text('Tên sản phẩm không được vượt quá 200 ký tự');
            }
            else if (regex.test(name)) {
                isValid = false
                $('#error-name').text('Tên sản phẩm không được bao gồm toàn kí tự số và kí tự đặc biệt');
            }
            else {
                $('#error-name').text('');
            }

            if (!isUploadFile) {
                isValid = false
                $('#error-image').text('Cần tải lên ít nhất 1 ảnh sản phẩm');
            }
            else if (image === undefined) {
                isValid = false
                $('#error-image').text('Bạn cần tải ảnh lên hoặc chọn một ảnh để hiển thị theo tùy chọn của sản phẩm');
            }
            else {
                $('#error-image').text('')
            }

            if (price == '') {
                isValid = false
                $('#error-price').text('Giá sản phẩm không được để trống');
            }
            else {
                if (numberRegex.test(price)) {
                    var p = parseFloat(price);
                    var decimalCount = (price.split('.')[1] || []).length;
                    if (p < 1000) {
                        $('#error-price').text('Giá sản phẩm không được nhỏ hơn 1000 đồng');
                        isValid = false
                    }
                    else if (decimalCount > 3) {
                        $('#error-price').text('Giá sản phẩm không được có quá 3 số sau dấu "," thập phân');
                        isValid = false
                    }
                    else {
                        $('#error-price').text('')
                    }
                }
                else {
                    $('#error-price').text("Giá sản phẩm phải là một số");
                    isValid = false
                }
            }
            return isValid
        }

        function addProductOption() {
            let isValid = isValidProductOption();
            var image = $('.item.select-image img').attr('src');

            var sizeId = $('#size').val();
            var sizeName = $('#size option:selected').text();

            var attributeId = $('#attribute').val();
            var attributeName = $('#attribute option:selected').text();

            var price = $('#price').val().trim()
            price = parseFloat(price)

            var listProductOptions = $('#list-product-option')
            var optionExists = false;
            var numberOptions = listProductOptions.find('li').length;
            var newOption = `
                                <li style="padding: 5px; position: relative">
                                    <span class="delete-button"><i class="icon-delete"></i></span>
                                    <div class="gap15" style="align-items: center; width: 100%; display: flex">
                                        <div class="choose-image" style="width: 7%">
                                            <img class="imageData" style="width: 50px; height: 50px" src="${image}" alt="">
                                        </div>
                                        <div style="width: 34%" class="text-tiny sizeData" value=${sizeId}>Kích thước: <span class="tf-color">${sizeName}</span></div>
                                        <div style="width: 34%" class="text-tiny attributeData" value=${attributeId}>Thuộc tính: <span class="tf-color">${attributeName}</span></div>
                                        <div style="width: 25%" class="text-tiny priceData" value=${price}>Giá: <span class="tf-color">${price}</span> đ</div>
                                    </div>
                                </li>
                                    `
            if (isValid) {
                listProductOptions.find('li').each(function () {
                    var existingOption = $(this);
                    var existingSizeId = existingOption.find('.sizeData').attr('value');
                    var existingAttributeId = existingOption.find('.attributeData').attr('value');
                    var existingPrice = existingOption.find('.priceData').attr('value');

                    if (existingSizeId == sizeId && existingAttributeId == attributeId) {
                        optionExists = true;
                        alert('Không thể thêm. Tùy chọn sản phẩm đã tồn tại')
                        return false; // Exit the loop if the option already exists
                    }

                    if (sizeId == 1 && attributeId == 1) {
                        if (numberOptions != 0) {
                            optionExists = true;
                            alert('Không thể thêm. Sản phẩm của bạn đang có các tùy chọn khác nhau')
                            return false;
                        }
                    }

                    if (existingSizeId == 1 && sizeId != 1) {
                        optionExists = true;
                        alert('Không thể thêm. Tùy chọn sản phẩm không thêm được kích thước này')
                        return false;
                    }

                    if (existingAttributeId == 1 && attributeId != 1) {
                        optionExists = true;
                        alert('Không thể thêm. Tùy chọn sản phẩm không thêm được thuộc tính này')
                        return false;
                    }

                    if (existingAttributeId != 1 && attributeId == 1) {
                        optionExists = true;
                        alert('Không thể thêm. Tùy chọn sản phẩm đã có thuộc tính khác.')
                        return false;
                    }

                    if (existingSizeId != 1 && sizeId == 1) {
                        optionExists = true;
                        alert('Không thể thêm. Tùy chọn sản phẩm đã có kích thước khác.')
                        return false;
                    }
                })

                if (!optionExists) {
                    listProductOptions.append(newOption);
                    addImageToList(image);
                }
            }
        }

        function saveProduct() {
            var isValid = true
            var name = $('#name').val().trim()
            var brandId = $('#brand').val();
            var categoryId = $('#category').val();
            var productCategory = $('#product-category').val();

            if (name == '') {
                isValid = false
                $('#error-name').text('Tên sản phẩm không được để trống');
            }
            else if (name.length > 200) {
                isValid = false
                $('#error-name').text('Tên sản phẩm không được vượt quá 200 ký tự');
            }
            else if (regex.test(name)) {
                isValid = false
                $('#error-name').text('Tên sản phẩm không được bao gồm toàn kí tự số và kí tự đặc biệt');
            }
            else {
                $('#error-name').text('');
            }

            if (isValid) {
                var listProductOptions = $('#list-product-option')
                var numberOptions = listProductOptions.find('li').length

                var options = []
                if (numberOptions > 0) {
                    listProductOptions.find('li').each(function () {
                        var op = $(this);
                        var Image = op.find('.imageData').attr('src');
                        var SizeId = op.find('.sizeData').attr('value');
                        var AttributeId = op.find('.attributeData').attr('value');
                        var Price = op.find('.priceData').attr('value');

                        var option = {
                            ImageData: Image,
                            SizeId: parseInt(SizeId),
                            AttributeId: parseInt(AttributeId),
                            Price: parseFloat(Price)
                        };
                        options.push(option);
                    });

                    var product = {
                        Name: name.trim(),
                        BrandId: parseInt(brandId),
                        CategoryId: parseInt(categoryId),
                        ProductCateId: parseInt(productCategory),
                        Description: description,
                        ProductOptions: options
                    };
                    var productCreateRequest = JSON.stringify(product);
                    console.log(productCreateRequest)
                    $.ajax({
                        url: '/Admin/Product/CreateRequest',
                        type: 'POST',
                        data: { product: productCreateRequest },
                        success: function (response) {
                            try {
                                var id = parseInte(response.result);
                                window.location.href = 'http://localhost:5206/add/product/detail?productId=' + response.result
                            }
                            catch {
                                alert(response.result)
                            }
                            ;
                        },
                    })
                }
                else {
                    alert('Bạn cần thêm các tùy chọn cho sản phẩm')
                }
            }
        }

        $('#list-product-option').on('click', '.delete-button', function () {
            $(this).parent().remove(); // Remove the parent <li> when the delete button is clicked
        });
        
        function addImage(imgTag, url) {
            toDataURL(url, function (dataURL) {
                imgTag.src = dataURL
            })
        }

        $('#list-image').find('img').each(function () {
            addImage(this, this.src)
        });

        function toDataURL(src, callback) {
            var image = new Image();
            image.crossOrigin = 'Anonymous';
            image.onload = function () {
                var canvas = document.createElement('canvas');
                var context = canvas.getContext('2d');
                canvas.height = this.naturalHeight;
                canvas.width = this.naturalWidth;
                context.drawImage(this, 0, 0);
                var dataURL = canvas.toDataURL('image/jpeg');
                callback(dataURL);
            };
            image.src = src;
        }
        
    </script>
}